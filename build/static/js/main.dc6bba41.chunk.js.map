{"version":3,"sources":["components/City.js","components/Restaurants.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js","assets/images/spinner.gif"],"names":["City","state","cities","loading","handleSelect","citySelected","_this","props","handleSelectCity","history","push","_this2","this","axios","get","then","res","setState","data","catch","err","console","log","_this3","dataSource","react_default","a","createElement","style","textAlign","width","height","alt","src","spinner","auto_complete","onSelect","e","placeholder","filterOption","inputValue","option","children","toUpperCase","indexOf","React","Component","connect","dispatch","type","Restaurants","restaurant","restaurants","loaded","prevProps","length","concat","Meta","Card","row","gutter","justify","align","map","i","restaurant_details","address","city","col","key","value","xs","span","md","lg","xl","card","hoverable","cover","name","image_url","title","description","es_button","href","reserve_url","target","rel","Header","Layout","Footer","Content","App","BrowserRouter","className","menu","theme","mode","lineHeight","Item","minHeight","marginTop","Switch","Route","path","component","exact","bottom","Boolean","window","location","hostname","match","initState","rootReducer","arguments","undefined","action","Object","objectSpread","store","createStore","compose","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dc6bba41.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { AutoComplete } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { connect } from \"react-redux\";\nimport spinner from \"../assets/images/spinner.gif\";\nclass City extends React.Component {\n  state = {\n    cities: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"http://opentable.herokuapp.com/api/cities\")\n      .then(res => {\n        this.setState({\n          cities: res.data.cities,\n          loading: false\n        });\n      })\n      .catch(err => {\n        console.log(\"Something Went Wrong!\");\n        console.log({ err });\n      });\n  }\n  handleSelect = citySelected => {\n    // Update State With Redux\n    this.props.handleSelectCity(citySelected);\n    this.props.history && this.props.history.push(\"/restaurants\");\n  };\n\n  render() {\n    const dataSource = this.state.cities;\n\n    return (\n      <div>\n        {this.state.loading ? (\n          <div\n            style={{\n              textAlign: \"center\"\n            }}\n          >\n            <img\n              style={{\n                width: \"50%\",\n                height: \"50%\"\n              }}\n              alt=\"spinner\"\n              src={spinner}\n            />\n          </div>\n        ) : (\n          <div>\n            <AutoComplete\n              onSelect={e => this.handleSelect(e)}\n              style={{ width: \"100%\" }}\n              dataSource={dataSource}\n              placeholder=\"Select Your City\"\n              filterOption={(inputValue, option) =>\n                option.props.children\n                  .toUpperCase()\n                  .indexOf(inputValue.toUpperCase()) !== -1\n              }\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSelectCity: citySelected => {\n      dispatch({ type: \"SHOW_RESTAURANTS\", citySelected: citySelected });\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(City);\n","import React from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, Button } from \"antd\";\nimport spinner from \"../assets/images/spinner.gif\";\n\nclass Restaurants extends React.Component {\n  state = {\n    restaurant: \"\",\n    restaurants: [],\n    loaded: \"\"\n  };\n\n  componenDidmount() {\n    this.setState({\n      loaded: false\n    });\n  }\n  componentDidUpdate(prevProps) {\n    this.props.citySelected.length !== prevProps.citySelected.length &&\n      axios\n        .get(\n          `http://opentable.herokuapp.com/api/restaurants?city=${\n            this.props.citySelected\n          }`\n        )\n        .then(res =>\n          this.setState({\n            restaurants: res.data.restaurants,\n            loaded: true\n          })\n        );\n  }\n\n  render() {\n    const { Meta } = Card;\n    return (\n      <div>\n        {this.state.loaded ? (\n          <div>\n            <Row gutter={48} type=\"flex\" justify=\"space-around\" align=\"middle\">\n              {this.state.restaurants.map((restaurant, i) => {\n                let restaurant_details =\n                  restaurant.address + \" \" + restaurant.city;\n                return (\n                  <Col\n                    key={i}\n                    value={100}\n                    xs={{ span: 24 }}\n                    md={{ span: 12 }}\n                    lg={{ span: 8 }}\n                    xl={{ span: 6 }}\n                  >\n                    <Card\n                      hoverable\n                      cover={\n                        <img alt={restaurant.name} src={restaurant.image_url} />\n                      }\n                    >\n                      <Meta\n                        title={restaurant.name}\n                        description={restaurant_details}\n                      />{\" \"}\n                      <br />{\" \"}\n                      <Button type=\"dashed\">\n                        <a\n                          alt=\"Reserve Table\"\n                          href={restaurant.reserve_url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Reserve Table\n                        </a>{\" \"}\n                      </Button>\n                    </Card>\n                  </Col>\n                );\n              })}\n            </Row>\n          </div>\n        ) : (\n          <div\n            style={{\n              textAlign: \"center\"\n            }}\n          >\n            <img\n              style={{\n                width: \"50%\",\n                height: \"50%\"\n              }}\n              alt=\"spinner\"\n              src={spinner}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    citySelected: state.citySelected\n  };\n};\n\nexport default connect(mapStateToProps)(Restaurants);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport City from \"./components/City\";\nimport Restaurants from \"./components/Restaurants\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport { Layout, Menu } from \"antd\";\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Header>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" style={{ lineHeight: \"64px\" }}>\n              <Menu.Item>\n                <a\n                  alt=\"Personal Portfolio Page\"\n                  href=\"http://www.rohito.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Personal Portfolio\n                </a>{\" \"}\n              </Menu.Item>\n              <Menu.Item>\n                {\" \"}\n                <a\n                  alt=\"Git Hub\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://www.github.com/rohitoOo\"\n                >\n                  Github\n                </a>\n              </Menu.Item>\n              <Menu.Item>\n                {\" \"}\n                <a\n                  alt=\"Source Code\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://www.github.com/rohitoOo/opentable\"\n                >\n                  Source Code\n                </a>{\" \"}\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content style={{ minHeight: \"500px\", marginTop:\"50px\" }}>\n            <div className=\"container\">\n              <Switch>\n                <Route path=\"/\" component={City} />\n              </Switch>\n              <Route exact path=\"/restaurants\" component={Restaurants} />\n            </div>\n          </Content>\n          <Footer\n            style={{\n              bottom: \"0\",\n              width: \"100%\",\n              height: \"60px\" /* Height of the footer */\n            }}\n          >\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"http://www.rohito.com\"\n            >\n              Rohito Bhambhani\n            </a>\n          </Footer>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    citySelected : \"\"\n}\n\nconst rootReducer = (state = initState, action) => {\nswitch(action.type){\n    case \"SHOW_RESTAURANTS\":\n        return {\n            ...state,\n            citySelected: action.citySelected\n        }      \n    default:  \n        return state\n    }  \n   \n}\n\nexport default rootReducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer, compose());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.b471c370.gif\";"],"sourceRoot":""}